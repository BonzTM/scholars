--[[
Module for determing the ending game state for the Players and the Opponent.

]]

function determineEndState()
    --[[
    Determine the ending game state for each Player.

    A Player's ending game state consists of
        * Silver
        * Gold
        * Employed Translators (those still in Rooms on the main board)
        * Workers
        * Retired Translators
        * Levels on the various Research Tracks
        * Amounts of Dice
        * Scroll Cards the Player has translated
        * Counts of the number of scrolls translated of a given language
        * Membership in the various Guilds of the House of Wisdom

    A Player's end game state is stored in the table PlayerEndState.
    This is indexed by the Player's color, then the category to be
    considered. The value associated with each category is itself a table.

    Returns
    -------
    nil

    ]]
    end_game_state = {
        'Silver',
        'Gold',
        'employed_translators',
        'Workers',
        'retired_translators',
        'research_tracks',
        'White Die',
        'Red Die',
        'Blue Die',
        'Yellow Die',
        'Purple Die',
        'Orange Die',
        'Green Die',
        'scroll_cards',
        'Translated Scrolls',
        'Guild Membership',
    }
    PlayerEndState = {}
    for i, player_color in ipairs(getSeatedPlayers()) do
        PlayerEndState[player_color] = {}
        for j, category in ipairs(end_game_state) do
            PlayerEndState[player_color][category] = {}
        end
    end

    for i, player_color in ipairs(getSeatedPlayers()) do
        --[[
            Assume Players have none of the following items to start
            * Silver
            * Gold
            * Workers
            * Employed Translators
            * Retired Translators
            * Translated Scrolls
        ]]
        PlayerEndState[player_color].Silver.num = 0
        PlayerEndState[player_color].Gold.num = 0
        PlayerEndState[player_color].Workers.num = 0
        PlayerEndState[player_color].employed_translators.num = 0
        -- Assume Players have translated no scrolls
        for _, language in ipairs(languages) do
            PlayerEndState[player_color]['Translated Scrolls'][language] = 0
        end

        for j, obj in ipairs(
            PlayerComponents[player_color].scoring_zone.getObjects()
        ) do
            if obj.hasTag('Translator') then
                table.insert(
                    PlayerEndState[player_color].retired_translators,
                    obj
                )
            elseif obj.getName() == 'Silver' then
                local silver_total = PlayerEndState[player_color].Silver.num
                PlayerEndState[player_color].Silver.num = silver_total + 1
            elseif obj.getName() == 'Silver Counter' then
                local silver_total = PlayerEndState[player_color].Silver.num
                -- The "count" button is the first button on the counter
                local val = obj.getButtons()[1].label
                PlayerEndState[player_color].Silver.num = silver_total + val
            elseif obj.getName() == 'Gold' then
                local gold_total = PlayerEndState[player_color].Gold.num
                PlayerEndState[player_color].Gold.num = gold_total + 1
            elseif obj.getName() == 'Gold Counter' then
                local gold_total = PlayerEndState[player_color].Gold.num
                -- The "count" button is the first button on the counter
                local val = obj.getButtons()[1].label
                PlayerEndState[player_color].Gold.num = gold_total + val
            elseif obj.hasTag('Scroll') then
                -- Add to the list of scrolls the Player has
                table.insert(
                    PlayerEndState[player_color].scroll_cards,
                    obj
                )
                -- Add 1 to the language total
                local lang_total = PlayerEndState[player_color][
                    'Translated Scrolls'][ScrollCards[obj.getGUID()
                    ].language
                ]
                PlayerEndState[player_color]['Translated Scrolls'][
                    ScrollCards[obj.getGUID()].language
                ] = lang_total + 1
            elseif obj.getGMNotes() == 'Worker' then
                local tally = PlayerEndState[player_color].Workers.num
                PlayerEndState[player_color].Workers.num = tally + 1
            end
        end

        -- Determine the Level of each Research Track
        for track, marker in pairs(
            PlayerComponents[player_color].research_markers
        ) do
            if marker.getPosition().z >= 6.0 then
                PlayerEndState[player_color].research_tracks[track] = 'Level 7'
            elseif marker.getPosition().z >= 5.1 then
                PlayerEndState[player_color].research_tracks[track] = 'Level 6'
            elseif marker.getPosition().z >= 4.2 then
                PlayerEndState[player_color].research_tracks[track] = 'Level 5'
            elseif marker.getPosition().z >= 3.2 then
                PlayerEndState[player_color].research_tracks[track] = 'Level 4'
            elseif marker.getPosition().z >= 2.3 then
                PlayerEndState[player_color].research_tracks[track] = 'Level 3'
            elseif marker.getPosition().z >= 1.4 then
                PlayerEndState[player_color].research_tracks[track] = 'Level 2'
            elseif marker.getPosition().z >= 0.5 then
                PlayerEndState[player_color].research_tracks[track] = 'Level 1'
            else
                PlayerEndState[player_color].research_tracks[track] = 'Level 0'
            end
        end

        -- Determine how many dice a player has
        local types_of_dice = {
            'White Die',
            'Red Die',
            'Blue Die',
            'Yellow Die',
            'Purple Die',
            'Orange Die',
            'Green Die',
        }
        for _, die_type in ipairs(types_of_dice) do
            PlayerEndState[player_color][die_type].num = 0
        end

        for _, obj_tbl in ipairs(
            PlayerComponents[player_color].dice_bag.getObjects()
        ) do
            local total = PlayerEndState[player_color][obj_tbl.name].num
            PlayerEndState[player_color][obj_tbl.name].num = total + 1
        end

    end

    -- Determine a Player's Guild Membership
    for guild, guild_tbl in pairs(HouseOfWisdom) do
        local guild_membership = {}
        for _, player_color in ipairs(getSeatedPlayers()) do
            guild_membership[player_color] = 0
        end
        for _, obj in pairs(guild_tbl.membership_zone.getObjects()) do
            if obj.hasTag('Influence') then
                local player_color = obj.getGMNotes()
                if player_color ~= opponent.name then
                    local tally = guild_membership[player_color]
                    guild_membership[player_color] = tally + 1
                end
            end
        end

        for _, player_color in ipairs(getSeatedPlayers()) do
            PlayerEndState[player_color]['Guild Membership'][
                guild
            ] = guild_membership[player_color]
        end
    end

    -- Determine how many Employed Translators a Player has
    for _, obj in ipairs(EmployedTranslatorZone.getObjects()) do
        if obj.hasTag('Influence') then
            local player_color = obj.getGMNotes()
            if player_color ~= opponent.name then
                PlayerEndState[
                    player_color
                ].employed_translators.num = PlayerEndState[
                    player_color
                ].employed_translators.num + 1
            end
        end
    end

end

function determineOpponentState()
    --[[
    Determine the ending game state for the Opponent.

    A Player's ending game state consists of
        * The Dice Sum (as indicated by the track)
        * Number of Employed Neutral Translators
        * Retired Translators
        * Research Markers that have been moved to the Opponent's Board
        * Counts of the number of Scrolls translated of a given language
        * Total Influence Markers in all Guilds

    The Opponent's end game state is stored in the table OpponentEndState.
    This is indexed by the various categories to be
    considered.

    Returns
    -------
    nil

    ]]
    opponentDiceSumTrack = {
        Vector(-2.94, 0, 0), -- -6 slot
        Vector(-2.44, 0, 0), -- -5 slot
        Vector(-1.95, 0, 0), -- -4 slot
        Vector(-1.45, 0, 0), -- -3 slot
        Vector(-0.97, 0, 0), -- -2 slot
        Vector(-0.48, 0, 0), -- -1 slot
        Vector(0, 0, 0), -- 0 slot
        Vector(0.51, 0, 0), -- 1 slot
        Vector(0.98, 0, 0), -- 2 slot
        Vector(1.48, 0, 0), -- 3 slot
        Vector(1.97, 0, 0), -- 4 slot
        Vector(2.46, 0, 0), -- 5 slot
        Vector(2.96, 0, 0), -- 6 slot
    }
    OpponentEndState = {
        ['dice_sum'] = nil,
        ['employed_translators'] = 0,
        ['retired_translators'] = {},
        ['research_markers'] = 0,
        ['Translated Scrolls'] = {},
        ['Guild Membership'] = 0,
    }
    for idx, offset in ipairs(opponentDiceSumTrack) do
        if isClose(
            diceSumTracker.getPosition().x,
            (opponent.board.getPosition() + offset).x
        ) then
            -- Tables start at 1, and we need the start to be -6
            OpponentEndState.dice_sum = idx - 7
            break
        end
    end

    -- Assume the Opponent has translated no scrolls
    for _, language in ipairs(languages) do
        OpponentEndState['Translated Scrolls'][language] = 0
    end
    OpponentEndState['Translated Scrolls'].total = 0

    for _, obj in ipairs(opponent.scoring_zone.getObjects()) do
        if obj.hasTag('Translator') then
            table.insert(
                OpponentEndState.retired_translators,
                obj
            )
        elseif obj.hasTag('Scroll') then
            -- -- Add to the list of scrolls the Player has
            -- table.insert(OpponentEndState.scroll_cards, obj)
            -- Add 1 to the language total
            local lang_total = OpponentEndState['Translated Scrolls'][
                ScrollCards[obj.getGUID()].language
            ]
            OpponentEndState['Translated Scrolls'][
                ScrollCards[obj.getGUID()].language
            ] = lang_total + 1
            -- Add 1 to the total of all Translated Scrolls
            OpponentEndState[
                'Translated Scrolls'
            ].total = OpponentEndState['Translated Scrolls'].total + 1
        end
    end

    -- Determine the number of Research Markers the Opponent
    -- managed to collect on their board
    for _, obj in ipairs(opponent.research_zone.getObjects()) do
        if obj.hasTag('Flag') then
            local total = OpponentEndState.research_markers
            OpponentEndState.research_markers = total + 1
        end
    end

    -- Determine the amount of the Opponent's Guild Membership
    for guild, guild_tbl in pairs(HouseOfWisdom) do
        for _, obj in pairs(guild_tbl.membership_zone.getObjects()) do
            if obj.hasTag('Influence') then
                if obj.getGMNotes() == opponent.name then
                    local tally = OpponentEndState['Guild Membership']
                    OpponentEndState['Guild Membership'] = tally + 1
                end
            end
        end
    end

    -- Determine the number of Employed Neutral Translators
    -- PlayerEndState[player_color].employed_translators.num
    for _, obj in ipairs(EmployedTranslatorZone.getObjects()) do
        if obj.hasTag('Translator') then
            local tally = OpponentEndState.employed_translators
            OpponentEndState.employed_translators = tally + 1
        end
    end
    -- Use the previously calculated number of Employed Player
    -- Translators to get the number of Employed Neutral Translators
    OpponentEndState.employed_translators = OpponentEndState[
        'employed_translators'
    ] - PlayerEndState[Turns.turn_color].employed_translators.num

end
