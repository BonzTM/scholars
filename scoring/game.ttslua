function scoreGame()

    if not ScoreGameConfirmed then
        ScoreGameConfirmed = true
        -- Absolute value of the offsets in each direction
        -- from the Player's board
        local x_offset = 14
        local y_offset = -0.15
        local z_offset = 9
        createScoringZones(2 * x_offset, 5.1, 2 * z_offset)
        drawScoringZoneBoundaries(x_offset, y_offset, z_offset)
        createGuildMembershipZones()


        broadcastToAll(
            'Placeholder for message telling players what to do '
            .. 'before the game can be scored.',
            log_message_color
        )
        return 0
    -- Second time, clean up each Player's area
    else
        for _, player_color in ipairs(getSeatedPlayers()) do
            for _, obj in ipairs(PlayerComponents[player_color].rest_zone.getObjects()) do
                if obj.getGMNotes() == 'Worker' then
                    obj.destruct()
                end
            end

            for _, obj in ipairs(PlayerComponents[player_color].scoring_zone.getObjects()) do
                if obj.getGMNotes() == 'Dice' then

                    if obj.getLock() then
                        obj.setLock(false)
                        local supply_bag = nil
                        if obj.getName() == 'Purple Die' then
                            supply_bag = PurpleDiceBag
                        elseif obj.getName() == 'Orange Die' then
                            supply_bag = OrangeDiceBag
                        elseif obj.getName() == 'Green Die' then
                            supply_bag = GreenDiceBag
                        end

                        supply_bag.putObject(obj)
                    else
                        PlayerComponents[player_color].dice_bag.putObject(obj)
                    end
                end
            end
        end

        -- If the Players are rescoring, move any Influence
        -- Markers from the Dice Sum scoring area
        for _, zone_tbl in ipairs(DiceSumZones) do
            for _, obj in ipairs(zone_tbl.zone.getObjects()) do
                if obj.hasTag('Influence') then
                    PlayerComponents[
                        obj.getGMNotes()
                    ].influence_bag.putObject(obj)
                end
            end
        end
    end

    function assignComponents()
        for i, player_color in ipairs(getSeatedPlayers()) do
            -- Assume Players have no Silver or Gold to start
            PlayerEndState[player_color].Silver.num = 0
            PlayerEndState[player_color].Gold.num = 0
            -- Assume Players have translated no scrolls
            languages = {
                'Chinese',
                'Sanskrit',
                'Greek',
                'Hebrew',
                'Persian',
                'Syriac'
            }
            for _, language in ipairs(languages) do
                PlayerEndState[player_color]['Translated Scrolls'][language] = 0
            end

            for j, obj in ipairs(PlayerComponents[player_color].scoring_zone.getObjects()) do
                if obj.hasTag('Translator') then
                    table.insert(
                        PlayerEndState[player_color].retired_translators,
                        obj
                    )
                elseif obj.getName() == 'Silver' then
                    local silver_total = PlayerEndState[player_color].Silver.num
                    PlayerEndState[player_color].Silver.num = silver_total + 1
                elseif obj.getName() == 'Silver Counter' then
                    local silver_total = PlayerEndState[player_color].Silver.num
                    -- The "count" button is the first button on the counter
                    local val = obj.getButtons()[1].label
                    PlayerEndState[player_color].Silver.num = silver_total + val
                elseif obj.getName() == 'Gold' then
                    local gold_total = PlayerEndState[player_color].Gold.num
                    PlayerEndState[player_color].Gold.num = gold_total + 1
                elseif obj.getName() == 'Gold Counter' then
                    local gold_total = PlayerEndState[player_color].Gold.num
                    -- The "count" button is the first button on the counter
                    local val = obj.getButtons()[1].label
                    PlayerEndState[player_color].Gold.num = gold_total + val
                elseif obj.hasTag('Scroll') then
                    -- Add to the list of scrolls the Player has
                    table.insert(
                        PlayerEndState[player_color].scroll_cards,
                        obj
                    )
                    -- Add 1 to the language total
                    local lang_total = PlayerEndState[player_color][
                        'Translated Scrolls'][ScrollCards[obj.getGUID()
                        ].language
                    ]
                    PlayerEndState[player_color]['Translated Scrolls'][
                        ScrollCards[obj.getGUID()].language
                    ] = lang_total + 1
                end
            end

            -- Determine the Level of each Research Track
            for track, marker in pairs(PlayerComponents[player_color].research_markers) do
                if marker.getPosition().z >= 6.0 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 7'
                elseif marker.getPosition().z >= 5.1 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 6'
                elseif marker.getPosition().z >= 4.2 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 5'
                elseif marker.getPosition().z >= 3.2 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 4'
                elseif marker.getPosition().z >= 2.3 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 3'
                elseif marker.getPosition().z >= 1.4 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 2'
                elseif marker.getPosition().z >= 0.5 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 1'
                else
                    PlayerEndState[player_color].research_tracks[track] = 'Level 0'
                end
            end

            -- Determine how many dice a player has
            local types_of_dice = {
                'White Die',
                'Red Die',
                'Blue Die',
                'Yellow Die',
                'Purple Die',
                'Orange Die',
                'Green Die',
            }
            for _, die_type in ipairs(types_of_dice) do
                PlayerEndState[player_color][die_type].num = 0
            end

            for _, obj_tbl in ipairs(PlayerComponents[player_color].dice_bag.getObjects()) do
                local total = PlayerEndState[player_color][obj_tbl.name].num
                PlayerEndState[player_color][obj_tbl.name].num = total + 1
            end

        end

        -- Determine a Player's Guild Membership
        for guild, guild_tbl in pairs(HouseOfWisdom) do
            local guild_membership = {}
            for _, player_color in ipairs(getSeatedPlayers()) do
                guild_membership[player_color] = 0
            end
            for _, obj in pairs(guild_tbl.membership_zone.getObjects()) do
                if obj.hasTag('Influence') then
                    local tally = guild_membership[obj.getGMNotes()]
                    guild_membership[obj.getGMNotes()] = tally + 1
                end
            end

            for _, player_color in ipairs(getSeatedPlayers()) do
                PlayerEndState[player_color]['Guild Membership'][
                    guild
                ] = guild_membership[player_color]
            end
        end

    end

    scoring_categories = {
        'dice_sum',
        'retired_translators',
        'guild_control',
        'caliph_cards',
        'research_tracks',
        'scroll_cards',
    }
    PlayerScores = {}
    for i, player_color in ipairs(getSeatedPlayers()) do
        PlayerScores[player_color] = {}
        for j, category in ipairs(scoring_categories) do
            PlayerScores[player_color][category] = {}
            PlayerScores[player_color][category].total = 0
            PlayerScores[player_color][category].itemized = {}
        end

        PlayerScores[player_color].total = 0
    end

    end_game_state = {
        'Silver',
        'Gold',
        'retired_translators',
        'research_tracks',
        'White Die',
        'Red Die',
        'Blue Die',
        'Yellow Die',
        'Purple Die',
        'Orange Die',
        'Green Die',
        'scroll_cards',
        'Translated Scrolls',
        'Guild Membership',
    }
    PlayerEndState = {}
    for i, player_color in ipairs(getSeatedPlayers()) do
        PlayerEndState[player_color] = {}
        for j, category in ipairs(end_game_state) do
            PlayerEndState[player_color][category] = {}
        end
    end

    assignComponents()
    scoreRetiredTranslators()
    scoreGuildControl()
    scoreCaliphCards()
    scoreResearchTracks()
    scoreDiceSum()
    scoreScrollCards()

    -- Add up the Players' totals
    for _, player_color in ipairs(getSeatedPlayers()) do
        for category, cat_table in pairs(PlayerScores[player_color]) do
            if category ~= 'total' then
                PlayerScores[player_color].total = PlayerScores[
                    player_color].total + cat_table.total
            end
        end
    end

    -- for _, player_color in ipairs(getSeatedPlayers()) do
    --     if player_color == 'Purple' then
    --         print("List of all the things in Purple's scoring zone.")
    --         for _, obj in ipairs(PlayerComponents['Purple'].scoring_zone.getObjects()) do
    --             print('        ' .. obj.getName())
    --         end
    --     end
    -- end

    displayScores()

end
