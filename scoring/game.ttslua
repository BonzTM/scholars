function scoreGame()

    if not ScoreGameConfirmed then
        ScoreGameConfirmed = true
        -- Absolute value of the offsets in each direction
        -- from the Player's board
        local x_offset = 14
        local y_offset = -0.15
        local z_offset = 8
        createScoringZones(2 * x_offset, 5.1, 2 * z_offset)
        drawScoringZoneBoundaries(x_offset, y_offset, z_offset)

        broadcastToAll(
            'Placeholder for message telling players what to do '
            .. 'before the game can be scored.',
            log_message_color
        )
        return 0
    end

    function assignComponents()
        for i, player_color in ipairs(getSeatedPlayers()) do
            for j, obj in ipairs(PlayerComponents[player_color].scoring_zone.getObjects()) do
                if obj.hasTag('Translator') then
                    table.insert(
                        PlayerEndState[player_color].retired_translators,
                        obj
                    )
                end
            end

            for track, marker in pairs(PlayerComponents[player_color].research_markers) do
                if marker.getPosition().z >= 6.0 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 7'
                elseif marker.getPosition().z >= 5.1 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 6'
                elseif marker.getPosition().z >= 4.2 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 5'
                elseif marker.getPosition().z >= 3.2 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 4'
                elseif marker.getPosition().z >= 2.3 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 3'
                elseif marker.getPosition().z >= 1.4 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 2'
                elseif marker.getPosition().z >= 0.5 then
                    PlayerEndState[player_color].research_tracks[track] = 'Level 1'
                else
                    PlayerEndState[player_color].research_tracks[track] = 'Level 0'
                end
            end
        end
    end

    scoring_categories = {
    --     'dice_sum',
        'retired_translators',
        'guild_control',
    --     'caliph_cards',
        'research_tracks',
    --     'scroll_cards',
    }
    PlayerScores = {}
    for i, player_color in ipairs(getSeatedPlayers()) do
        PlayerScores[player_color] = {}
        for j, category in ipairs(scoring_categories) do
            PlayerScores[player_color][category] = {}
            PlayerScores[player_color][category].total = 0
            PlayerScores[player_color][category].itemized = {}
        end
    end

    end_game_state = {
        'retired_translators',
        'research_tracks',
    }
    PlayerEndState = {}
    for i, player_color in ipairs(getSeatedPlayers()) do
        PlayerEndState[player_color] = {}
        for j, category in ipairs(end_game_state) do
            PlayerEndState[player_color][category] = {}
        end
    end

    assignComponents()
    scoreRetiredTranslators()
    scoreGuildControl()
    scoreResearchTracks()

    for _, player_color in ipairs(getSeatedPlayers()) do
        if player_color == 'Purple' then
            print("List of all the things in Purple's scoring zone.")
            for _, obj in ipairs(PlayerComponents['Purple'].scoring_zone.getObjects()) do
                print('        ' .. obj.getName())
            end
        end
    end

    displayScores()

end
