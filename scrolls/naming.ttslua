function nameScrolls()
    --[[
        Name the Starting and Game Scroll Cards.

        This should only be done to set the values, and
        then that state saved to serve as the game state.

        If you need to update the card names, then add this
        back to the end of onLoad.
    ]]

    -- -- Name the Starting Translators
    -- for _, obj_tbl in ipairs(StartingTranslatorBag.getObjects()) do
    --     starting_translator = StartingTranslatorBag.takeObject({
    --         position = StartingTranslatorBag.getPosition() + Vector(0, -3, 0),
    --         guid = obj_tbl.guid,
    --     })
    --     starting_translator.setName(StartingTranslators[obj_tbl.guid].name)
    --     StartingTranslatorBag.putObject(starting_translator)
    -- end

    -- Name the Starter Scroll Cards
    for scroll_guid, scroll_tbl in pairs(ScrollCards) do
        if string.find(scroll_tbl.name, 'Starting') then
            local scroll_card = getObjectFromGUID(scroll_guid)
            scroll_card.setName(scroll_tbl.name)
        end
    end

    -- Name the Game Scroll Cards
    local deck_size = #ScrollDeck.getObjects()
    -- iterates from the bottom to the top of the deck
    for idx, obj_tbl in ipairs(ScrollDeck.getObjects()) do
        if idx < deck_size - 1 then
            local scroll_card = ScrollDeck.takeObject({
                position = ScrollDeck.getPosition() + Vector(0, 0.5 * idx, 0),
                guid = obj_tbl.guid,
            })
            scroll_card.setName(ScrollCards[obj_tbl.guid].name)

        -- If you don't preserved the deck by handling the last 2
        -- cards differently, the GUID will change
        else
            Wait.time(
                function()
                    local scroll_card = ScrollDeck.takeObject({
                        position = ScrollDeck.getPosition() + Vector(0, 0.5 * idx, 0),
                        guid = obj_tbl.guid,
                    })
                    scroll_card.setName(ScrollCards[obj_tbl.guid].name)
                end,
                7
            )
        end
    end

    -- -- Name the Employable Translators
    -- for language, deck in pairs(TranslatorStacks) do
    --     local deck_size = #deck.getObjects()
    --     -- iterates from the bottom to the top of the deck
    --     for _, obj_tbl in ipairs(deck.getObjects()) do
    --         if _ < deck_size - 1 then
    --             employable_translator = deck.takeObject({
    --                 position = deck.getPosition() + Vector(0, 0.5 * _, 0),
    --                 guid = obj_tbl.guid,
    --             })
    --
    --             employable_translator.setName(
    --                 EmployableTranslators[obj_tbl.guid].name
    --             )
    --         -- If you don't preserved the deck by handling the last 2
    --         -- cards differently, the GUID will change
    --         else
    --             Wait.time(
    --                 function()
    --                     employable_translator = deck.takeObject({
    --                         position = deck.getPosition() + Vector(0, 0.5 * _, 0),
    --                         guid = obj_tbl.guid,
    --                     })
    --
    --                     employable_translator.setName(
    --                         EmployableTranslators[obj_tbl.guid].name
    --                     )
    --                 end,
    --                 2
    --             )
    --
    --         end
    --
    --     end
    -- end

end
