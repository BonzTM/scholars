--[[
Supports a Player's interaction with the Scroll Card Draw Pile when Resting.

]]
function GetDeck()
    --[[
    Return the deck in the DeckZone (if possible).

    Returns
    -------
    Deck
        The first deck found in the DeckZone. If no deck is found, returns nil.

    ]]
    local zoneObjects = DeckZone.getObjects()
    for _, item in ipairs(zoneObjects) do
        if item.type == 'Deck' then
            return item
        end
    end

end


function CardPresent()
    --[[
    Return the card in the DeckZone (if possible).

    Returns
    -------
    Card
        The first card found in the DeckZone. If no card is found, returns nil.

    ]]
    local zoneObjects = DeckZone.getObjects()
    for _, item in ipairs(zoneObjects) do
        if item.type == 'Card' then
            return item
        end
    end

end


function RestCard(obj, player_color, alt_click)
    --[[
    Take the bottom Scroll Card from the Draw Pile and reveal it to the Players.

    Take the bottom Scroll Card from the Scroll Deck Draw Pile and flip it
    over. If the Scroll Deck Draw Pile has been exhaused, then the Reserve
    will be moved to the DeckZone.

    Parameters
    ----------
    obj : Black Checker
        The Black Checker denoted as the ButtonToken.
    player_color : str
        The color of the Player that clicked the button.
    alt_click : bool
        True if a button other than left-click was used to click the button.

    ]]
    if GetDeck() then
        GetDeck().takeObject({
            top = false,
            flip = true,
            position = Vector(-20, 1.30, 5.00)
        })
    elseif CardPresent() then
        CardPresent().flip()
        CardPresent().setPositionSmooth({-20, 1.30, 5.00})
        if not ScrollDrawDeckExhausted then
            ScrollDrawDeckExhausted = true
            ScrollDeck.setPositionSmooth(DeckZone.getPosition())
        end

    else
        broadcastToColor(
            'All Scroll Cards have been used.',
            player_color,
            log_message_color
        )
    end

end
